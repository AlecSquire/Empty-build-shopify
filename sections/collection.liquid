{% style %} 

  .master-container {
    width: 100dvh 
    margin: 0 auto; 
  }
  .collection-item { 
    display: flex;
    align-content: center;
    justify-content: center;
    gap: 20px; /* Changed from 20% to a fixed value */
    padding: 2px; /* Changed from 20% to a fixed value */
    outline: 1px solid #ddd;
    outline-offset: -5px;
    border-radius: 2px;
}
  
  .collection-container {
    display: grid;
    grid-template-areas: 
    "collection-item collection-item  collection-item"
    "collection-item collection-item  collection-item"
    "collection-item collection-item  collection-item";
    grid-template-rows: repeat(auto-fit, minmax(160px, 1fr)); 
    grid-gap: 6px;
    justify-content: center;
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); 
    grid-auto-flow: row;

  }   

  .product img {
    height: 100%;
  width: 100%;
  object-fit: cover;
  
  }

  .product text {
    x-overflow:clipped;
    display: flex;
    justify-content:flex-end;
}


  @media screen and (min-width: 768px) and (max-width: 1023px ){
  .collection-container {
    display: grid;
    grid-template-areas: 
    "collection-item collection-item  collection-item"
    "collection-item collection-item  collection-item"
    "collection-item collection-item  collection-item";
    grid-template-rows: repeat(auto-fit, minmax(160px, 1fr)); 
    grid-gap: 6px;
    justify-content: center;
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); 
    grid-auto-flow: row;
  }
}

@media screen and (min-width: 280px) and (max-width: 767px) {
  .collection-container {
    display: grid;
    grid-template-areas: 
    "collection-item collection-item"
    "collection-item collection-item"
    "collection-item collection-item";
    grid-template-rows: repeat(auto-fit, minmax(160px, 1fr)); 
    grid-gap: 6px;
    justify-content: center;
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); 
    grid-auto-flow: row;
  }
}
/* 
  
  @media screen and (min-width: 1024px){
  .collection-container {
    display: grid;
    grid-template-columns: repeat(4, 1fr); 
    grid-template-rows: repeat(6, 1fr); 
    grid-gap: 6px;
    justify-content: center;
    grid-auto-flow: row;
  }  
}

@media screen and (min-width: 768px) and (max-width: 1023px ){
  .collection-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); 
    grid-template-rows: repeat(6, 1fr); 
    grid-gap: 6px;
    justify-content: center;
    grid-auto-flow: row;
  }  
}

@media screen and (min-width: 280px) and (max-width: 767px)
.collection-container {
    box-sizing: border-box;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax (22rem, 1fr)); 
    grid-template-rows: repeat(6, 1fr); 
    font-size: 0;
    margin: 0;
    padding: 0;
    width: 100%;
} */
  {% endstyle %} 

  <div class="master-container">
  {% paginate collection.products by 50 %}
  <h1>{{ collection.title }}</h1>
  <select id="sort-by">
    {% assign sort_by = collection.sort_by | default: collection.default_sort_by %}
    {% for option in collection.sort_options %}
      <option value="{{ option.value }}" {% if option.value == sort_by %}selected="selected"{% endif %}>
        {{ option.name }}
      </option>
    {% endfor %}
  </select>
  <div class="collection-container">
    {% for product in collection.products %}
      <div class="collection-item"> 
        <div class="product">
      <a href="{{ product.url }}">
       <h3> {{ product.title | link_to: product.url }}</h3> 
       <div class="product-image">
        {{ product.featured_image | image_url: width: 500 | image_tag }}
      </div>
              {{ product.title }}
        {{ product.price | money }}
      </a>
    </div>
      </div>
    {% endfor %}
  </div>
  {{ paginate | default_pagination }}
  {% endpaginate %}
  </div>


<script>
  Shopify.queryParams = {};

  // Preserve existing query parameters
  if (location.search.length) {
    var params = location.search.substr(1).split('&');

    for (var i = 0; i < params.length; i++) {
      var keyValue = params[i].split('=');

      if (keyValue.length) {
        Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
      }
    }
  }

  // Update sort_by query parameter on select change
  document.querySelector('#sort-by').addEventListener('change', function(e) {
    var value = e.target.value;

    Shopify.queryParams.sort_by = value;
    location.search = new URLSearchParams(Shopify.queryParams).toString();
  });
</script>