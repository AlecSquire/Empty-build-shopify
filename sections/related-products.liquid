{{ 'related-product.css' | asset_url | stylesheet_tag }}

<div class="related">
    <div class="width">
        <h2> Related products</h2>

        <div class="related-products">
       </div>
   </div>
</div>


{% if cart.item_count > 0 %}
    {% assign relatedId = cart.items[0].product_id %}
{% else %}
    {% assign relatedId = 8841362964775 %}
{% endif %}
    {{ product.id }}

<script> 

function formatMoney (cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
     return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
};
function buildBlocks (product) {
    const formattedPrice = formatMoney ( product.price, "{{ shop.money_format }}")
    const html = `
    <a class="related-product" href="${product.url}">
      <img src="${product.images[0]}"/>
      <h4> ${product.title} <h4> 
      <span>  ${ formattedPrice } </span>
      <form method="post" action="/cart/add">
            <input name="id" type="hidden" value="${product.variants[0].id}"/>
            <button type="submit">Add to cart</button>
        </form>
    </a>
    `
   return html
}

fetch(window.Shopify.routes.root + "recommendations/products.json?product_id={{ relatedId }}&limit=3")
    .then(response => response.json())
    .then(({ products }) => {
        products.forEach(product => {
            const html = buildBlocks (product)
            document.querySelector('.related-products').innerHTML += html
        });
     }
  );
</script>
{% schema %}
{
 "name": "related products",
 "settings": [
             ],
 "presets": [ 
    {
    "name": "related products"
    }
            ]  
}
  {% endschema %}